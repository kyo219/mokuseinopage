---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const products = await getCollection('product');
const sortedProducts = products.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Get unique tags
const allTags = [...new Set(products.flatMap(product => product.data.tags))].sort();
---

<Layout title="Product">
	<div class="projects-container">
		<header class="projects-header">
			<h1>Product Showcase</h1>
			<p class="subtitle">A collection of my work and experiments</p>
		</header>

		<div class="tag-filter">
			<button class="tag-button active" data-tag="all">All Products</button>
			{allTags.map(tag => (
				<button class="tag-button" data-tag={tag}>#{tag}</button>
			))}
		</div>

		<div class="projects-grid">
			{sortedProducts.map(product => (
				<a href={`/product/${product.slug}`} class="project-card" data-tags={JSON.stringify(product.data.tags)}>
					<div class="project-preview">
						{(product.data.image || product.data.images?.[0]) && (
							<img 
								src={product.data.image || product.data.images[0]} 
								alt={product.data.title}
								class="project-image"
							/>
						)}
						<div class="project-overlay">
							<span class="view-project">View Project â†’</span>
						</div>
					</div>
					<div class="project-content">
						<div class="project-header">
							<h2 class="project-title">{product.data.title}</h2>
							<div class={`status-badge ${product.data.status}`}>
								{product.data.status.replace('-', ' ')}
							</div>
						</div>
						<p class="project-description">{product.data.description}</p>
						<div class="tech-stack">
							{product.data.tags.map(tag => (
								<span class="tech-tag">#{tag}</span>
							))}
						</div>
					</div>
				</a>
			))}
		</div>

		{sortedProducts.length === 0 && (
			<div class="empty-state">
				<div class="empty-icon">ðŸš§</div>
				<h2>No Products Yet</h2>
				<p>Products are coming soon! Stay tuned...</p>
			</div>
		)}
	</div>
</Layout>

<style>
	.projects-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem 1rem;
	}

	.projects-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.subtitle {
		color: var(--secondary-text);
		font-size: 1.1rem;
		margin-top: 0.5rem;
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 2rem;
	}

	.project-card {
		background: var(--card-bg);
		border: 1px solid var(--border-color);
		border-radius: 16px;
		overflow: hidden;
		text-decoration: none;
		color: inherit;
		transition: all 0.3s ease;
	}

	.project-card:hover {
		transform: translateY(-4px);
		border-color: var(--accent-color);
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
	}

	.project-preview {
		position: relative;
		aspect-ratio: 16/9;
		background: var(--code-bg);
		overflow: hidden;
	}

	.project-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.project-overlay {
		position: absolute;
		inset: 0;
		background: rgba(0, 0, 0, 0.7);
		display: flex;
		align-items: center;
		justify-content: center;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.view-project {
		color: white;
		font-weight: 600;
		transform: translateY(10px);
		transition: transform 0.3s ease;
	}

	.project-card:hover .project-overlay {
		opacity: 1;
	}

	.project-card:hover .view-project {
		transform: translateY(0);
	}

	.project-card:hover .project-image {
		transform: scale(1.05);
	}

	.project-content {
		padding: 1.5rem;
	}

	.project-header {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.project-title {
		font-size: 1.25rem;
		margin: 0;
	}

	.status-badge {
		font-size: 0.8rem;
		padding: 0.25rem 0.75rem;
		border-radius: 9999px;
		font-weight: 600;
		text-transform: capitalize;
	}

	.status-badge.completed {
		background: rgba(0, 200, 83, 0.1);
		color: rgb(0, 200, 83);
	}

	.status-badge.in-progress {
		background: rgba(255, 171, 0, 0.1);
		color: rgb(255, 171, 0);
	}

	.status-badge.planned {
		background: rgba(99, 102, 241, 0.1);
		color: rgb(99, 102, 241);
	}

	.project-description {
		color: var(--secondary-text);
		margin: 0 0 1rem;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.tech-stack {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}

	.tech-tag {
		font-size: 0.9rem;
		color: var(--accent-color);
	}

	.empty-state {
		text-align: center;
		padding: 4rem 2rem;
		background: var(--card-bg);
		border: 1px solid var(--border-color);
		border-radius: 16px;
	}

	.empty-icon {
		font-size: 3rem;
		margin-bottom: 1rem;
	}

	@media (max-width: 768px) {
		.projects-grid {
			grid-template-columns: 1fr;
		}
	}

	.tag-filter {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		margin-bottom: 2rem;
		padding: 1rem;
		background: var(--card-bg);
		border: 1px solid var(--border-color);
		border-radius: 12px;
		position: sticky;
		top: 80px;
		z-index: 10;
		backdrop-filter: blur(12px);
	}

	.tag-button {
		background: transparent;
		border: 1px solid var(--border-color);
		color: var(--secondary-text);
		padding: 0.5rem 1rem;
		border-radius: 9999px;
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.tag-button:hover {
		border-color: var(--accent-color);
		color: var(--accent-color);
	}

	.tag-button.active {
		background: var(--accent-color);
		border-color: var(--accent-color);
		color: white;
	}

	.project-card.hidden {
		display: none;
	}
</style>

<script>
function initializeTagFilter() {
	const tagButtons = document.querySelectorAll('.tag-button');
	const projectCards = document.querySelectorAll('.project-card');
	let activeTag = 'all';

	function filterProjects(tag: string) {
		projectCards.forEach(card => {
			const tags = JSON.parse(card.getAttribute('data-tags') || '[]');
			if (tag === 'all' || tags.includes(tag)) {
				card.classList.remove('hidden');
			} else {
				card.classList.add('hidden');
			}
		});
	}

	function updateActiveButton(clickedTag: string) {
		tagButtons.forEach(button => {
			if (button.getAttribute('data-tag') === clickedTag) {
				button.classList.add('active');
			} else {
				button.classList.remove('active');
			}
		});
	}

	tagButtons.forEach(button => {
		button.addEventListener('click', (e) => {
			e.preventDefault();
			const tag = button.getAttribute('data-tag') || 'all';
			if (tag === activeTag) return;
			
			activeTag = tag;
			updateActiveButton(tag);
			filterProjects(tag);
		});
	});
}

// Initialize when the DOM is ready
document.addEventListener('DOMContentLoaded', initializeTagFilter);
</script>